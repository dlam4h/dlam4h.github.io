<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DLAM&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-07T13:10:54.543Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>DLAM4H</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Inception系列论文</title>
    <link href="http://yoursite.com/2020/07/02/Inception%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87/"/>
    <id>http://yoursite.com/2020/07/02/Inception%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87/</id>
    <published>2020-07-02T02:08:40.713Z</published>
    <updated>2020-07-07T13:10:54.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="InceptionV1"><a href="#InceptionV1" class="headerlink" title="InceptionV1"></a><a href="inception_v1.pdf">InceptionV1</a></h2><p><img src="/2020/07/02/Inception%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87/1.jpg" alt="inceptionV1模块结构"><br>采用融合不同卷积核的方式来加宽网络。不同大小的卷积核能够提取不同尺度的信息，在3×3和5×5的卷积核前面添加了1×1的卷积核，能够升维和降维且计算量小。训练阶段在网络的不同深度计算loss来帮助网络收敛。</p><h2 id="InceptionV2InceptionV3"><a href="#InceptionV2InceptionV3" class="headerlink" title="InceptionV2InceptionV3"></a><a href="inception_v2.pdf">InceptionV2</a><a href="inception_v3.pdf">InceptionV3</a></h2><p><img src="/2020/07/02/Inception%E7%B3%BB%E5%88%97%E8%AE%BA%E6%96%87/2.jpg" alt="inceptionV2模块结构"><br>对卷积进行分解，将大卷积核分解成若干个小卷积核，感受野不变，但是参数量和计算量减小，加深了网络有利于提升性能。此外，将n×n的卷积核尺寸分解为1×n和n×1两个卷积。例如，一个 3×3 的卷积等价于首先执行一个1×3的卷积再执行一个3×1的卷积。<br>提出了Batch Normalization，用于防止梯度爆炸或弥散、可以提高训练时模型对于不同超参（学习率、初始化）的鲁棒性、可以让大部分的激活函数能够远离其饱和区域。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;InceptionV1&quot;&gt;&lt;a href=&quot;#InceptionV1&quot; class=&quot;headerlink&quot; title=&quot;InceptionV1&quot;&gt;&lt;/a&gt;&lt;a href=&quot;inception_v1.pdf&quot;&gt;InceptionV1&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="目标识别" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E8%AF%86%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>卷积的几种实现方式</title>
    <link href="http://yoursite.com/2020/04/23/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2020/04/23/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</id>
    <published>2020-04-23T11:48:20.000Z</published>
    <updated>2020-04-25T13:31:34.352Z</updated>
    
    <content type="html"><![CDATA[<p>参考ncnn的Mat类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(<span class="keyword">int</span> _w, <span class="keyword">int</span> _h, <span class="keyword">int</span> _c, <span class="keyword">int</span> elemsize = <span class="number">4u</span>)</span></span>;</span><br><span class="line">    Mat();</span><br><span class="line">    Mat(<span class="keyword">int</span> _w, <span class="keyword">int</span> _h, <span class="keyword">int</span> _c, <span class="keyword">int</span> elemsize = <span class="number">4u</span>);</span><br><span class="line">    Mat(<span class="keyword">int</span> _w, <span class="keyword">int</span> _h, <span class="keyword">void</span>* _data, <span class="keyword">int</span> elemsize = <span class="number">4u</span>);</span><br><span class="line">    <span class="function">Mat <span class="title">channel</span><span class="params">(<span class="keyword">int</span> _c)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> Mat <span class="title">channel</span><span class="params">(<span class="keyword">int</span> _c)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    ~ Mat();</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">operator</span> T*();</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="keyword">operator</span> <span class="keyword">const</span> T*() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">float</span>* <span class="title">row</span><span class="params">(<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> <span class="keyword">float</span>* <span class="title">row</span><span class="params">(<span class="keyword">int</span> y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="keyword">void</span>* data;</span><br><span class="line">    <span class="keyword">int</span> w;       <span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> h;       <span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> c;       <span class="comment">//</span></span><br><span class="line">    <span class="keyword">int</span> cstep;   <span class="comment">// cstep = w * h</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">total</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="keyword">int</span> elemsize;</span><br><span class="line">    <span class="keyword">int</span> refcount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_make_border</span><span class="params">(<span class="keyword">const</span> Mat&amp; _in, Mat&amp; _out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inw = _in.w;</span><br><span class="line">    <span class="keyword">int</span> inh = _in.h;</span><br><span class="line">    <span class="keyword">int</span> inch = _in.c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; inch; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inh; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">void</span>* in = _in.channel(p).row(i);</span><br><span class="line">            <span class="keyword">void</span>* out = _out.channel(p).row(i);</span><br><span class="line">            <span class="built_in">memcpy</span>(out, in, inw*<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy_cut_border</span><span class="params">(<span class="keyword">const</span> Mat&amp; _in, Mat&amp; _out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> inw = _in.w;</span><br><span class="line">    <span class="keyword">int</span> inh = _in.h;</span><br><span class="line">    <span class="keyword">int</span> inch = _in.c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> outh = _out.h;</span><br><span class="line">    <span class="keyword">int</span> outw = _out.w;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; inch; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outh; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">void</span>* in = _in.channel(p).row(i);</span><br><span class="line">            <span class="keyword">void</span>* out = _out.channel(p).row(i);</span><br><span class="line">            <span class="built_in">memcpy</span>(out, in, outw*<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="普通卷积实现"><a href="#普通卷积实现" class="headerlink" title="普通卷积实现"></a>普通卷积实现</h2><p>6层循环，输出通道-&gt;输入通道-&gt;输出W-&gt;输出H-&gt;卷积核W-&gt;卷积核H</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conv2</span><span class="params">(<span class="keyword">const</span> Mat&amp; Mat_in, Mat&amp; Mat_out, <span class="keyword">const</span> Mat&amp; _kernel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = Mat_in.w;</span><br><span class="line">    <span class="keyword">int</span> inch = Mat_in.c;</span><br><span class="line">    <span class="keyword">int</span> inw = Mat_in.w;</span><br><span class="line">    <span class="keyword">int</span> inh = Mat_in.h;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> outw = Mat_out.w;</span><br><span class="line">    <span class="keyword">int</span> outh = Mat_out.h;</span><br><span class="line">    <span class="keyword">int</span> outch = Mat_out.c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* img = Mat_in;</span><br><span class="line">    <span class="keyword">float</span>* out = Mat_out;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span>* kernel = _kernel;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outch; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; inch; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; outw; x++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; outh; y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">0</span>; m &lt; _kernel.w; m++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; _kernel.h; n++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            out[i*Mat_out.cstep + y*outw + x] += img[j*Mat_in.cstep + (y+n)*inw + x + m] * kernel[i*_kernel.cstep*inch + j*_kernel.cstep + n*_kernel.w + m];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="im2col-gemm"><a href="#im2col-gemm" class="headerlink" title="im2col+gemm"></a>im2col+gemm</h2><p>将每一步卷积运算提前转换好，以3×3卷积为例，将每次要计算的9个值排成一列进行存储(放到连续的内存中)。好处是cache性能好很多，缺点是需要申请额外的空间来存储来转换输入特征图。<br><img src="/2020/04/23/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/2.png" alt> <img src="/2020/04/23/%E5%8D%B7%E7%A7%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/3.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">col2im</span><span class="params">(<span class="keyword">const</span> Mat&amp; _in, Mat&amp; _out)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> outch = _out.c;</span><br><span class="line">    <span class="keyword">int</span> outcstep = _out.cstep;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outch; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">float</span>* in = _in;</span><br><span class="line">        in+=i;</span><br><span class="line">        <span class="keyword">float</span>* out = _out.channel(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; outcstep; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            *out = *in;</span><br><span class="line">            out++;</span><br><span class="line">            in += outch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conv4</span><span class="params">(<span class="keyword">const</span> Mat&amp; Mat_in, Mat&amp; Mat_out, <span class="keyword">const</span> Mat&amp; _kernel)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> kercstep = _kernel.cstep * Mat_in.c;</span><br><span class="line">    <span class="keyword">int</span> inch = Mat_in.c;</span><br><span class="line">    <span class="keyword">int</span> outch = Mat_out.c;</span><br><span class="line">    <span class="keyword">int</span> outcstep = Mat_out.cstep;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; inch; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function">Mat <span class="title">dlam</span><span class="params">(<span class="number">9</span>, outcstep,<span class="number">1</span>)</span></span>;</span><br><span class="line">        Mat img = Mat_in.channel(p);</span><br><span class="line">        im2col(img, dlam);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span>* r = Mat_out;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">float</span>* kernel = _kernel.channel(p);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; outch; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span>* img0 = dlam;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outcstep; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                *r += img0[<span class="number">0</span>] * kernel[<span class="number">0</span>] + img0[<span class="number">1</span>] * kernel[<span class="number">1</span>] + img0[<span class="number">2</span>] * kernel[<span class="number">2</span>] +</span><br><span class="line">                      img0[<span class="number">3</span>] * kernel[<span class="number">3</span>] + img0[<span class="number">4</span>] * kernel[<span class="number">4</span>] + img0[<span class="number">5</span>] * kernel[<span class="number">5</span>] +</span><br><span class="line">                      img0[<span class="number">6</span>] * kernel[<span class="number">6</span>] + img0[<span class="number">7</span>] * kernel[<span class="number">7</span>] + img0[<span class="number">8</span>] * kernel[<span class="number">8</span>];</span><br><span class="line">                r++;</span><br><span class="line">                img0+=<span class="number">9</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            kernel += kercstep;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="winograd"><a href="#winograd" class="headerlink" title="winograd"></a><a href="winograd.pdf">winograd</a></h2><p>对于输出长度为$m$，卷积核尺寸为$r$的卷积运算记为$F(m,r)$，所需的乘法运算的次数最少（每个输入数据只进行一次乘法）为:$$\mu(F(m,r))=m+r-1$$对应二维的卷积运算为:<br>$$<br>\begin{aligned}<br>\mu(F(m\times n,r\times s)) &amp;= \mu(F(m,r))\mu(F(n,s)) \\<br>&amp;= (m+r-1)(n+s-1)<br>\end{aligned}<br>$$如果按照普通的卷积计算方式（滑动窗口的方式），一维时需要$m\times n$次乘法，二维时需要$m\times n\times r\times s$次乘法。<br>实现$F(2,3)$的标准卷积需要6次乘法，而winograd只需要4次乘法：<br>$$<br>F(2,3)=<br>\left[ \begin{matrix}<br>d_0 &amp; d_1 &amp; d_2 \\<br>d_1 &amp; d_2 &amp; d_3 \end{matrix}\right]<br>\left[ \begin{matrix}<br>g_0 \\<br>g_1 \\<br>g_2 \end{matrix}\right]<br>=\left[ \begin{matrix}<br>m_1+m_2+m_3 \\<br>m_2-m_3-m_4 \end{matrix}\right] \\<br>m_1 = (d_0-d_2)g_0 \quad\quad<br>m_2=(d_1+d_2)\frac{g_0+g_1+g_2}{2} \\<br>m_4 = (d_1-d_3)g_2 \quad\quad<br>m_3 = (d_2-d_1)\frac{g_0-g_1+g_2}{2}<br>$$转换为矩阵的形式为:<br>$$<br>\begin{aligned}<br>Y &amp;=A^T[(Gg)\odot (B^Td)] \\<br>B^T &amp;=\left[ \begin{matrix}<br>1 &amp; 0 &amp; -1 &amp; 0 \\<br>0 &amp; 1 &amp; 1 &amp; 0 \\<br>0 &amp; -1 &amp; 1 &amp; 0 \\<br>0 &amp; 1 &amp; 0 &amp; -1<br>\end{matrix}\right] \\<br>G &amp;=\left[ \begin{matrix}<br>1 &amp; 0 &amp; 0 \\<br>\frac{1}{2} &amp; \frac{1}{2} &amp; \frac{1}{2} \\<br>\frac{1}{2} &amp; -\frac{1}{2} &amp; \frac{1}{2} \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}\right] \\<br>A^T &amp;=\left[ \begin{matrix}<br>1 &amp; 1 &amp; 1 &amp; 0 \\<br>0 &amp; 1 &amp; -1 &amp; -1<br>\end{matrix}\right] \\<br>g &amp;= \left[ \begin{matrix} g_0 &amp; g_1 &amp; g_2 \end{matrix}\right]^T \\<br>d &amp;= \left[ \begin{matrix} d_0 &amp; d_1 &amp; d_2 &amp; d_3 \end{matrix}\right]^T<br>\end{aligned}<br>$$对于二维的$F(2\times 2,3\times 3)$计算公式为:<br>$$<br>Y =A^T[(GgG^T)\odot (B^TdB)]A<br>$$winograd减少的乘法的次数，增加了加法的次数，但是也需要额外的空间去存储转换后的卷积核和输入特征图，适合小尺寸的卷积运算，具体实现代码（ncnn）</p><ol><li>对输入和输出特征图进行填充，$F(2\times 2,3\times 3)$每次输入$(4\times 4)$大小的图片，得到$(2\times 2)$大小的图片，因此将输入特征图填充至$(4\times 4)$的整数倍，得到输出结果后再裁剪掉多余的像素。</li><li>计算$U=GgG^T$<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">conv3x3s1_winograd23_transform_kernel</span><span class="params">(<span class="keyword">const</span> Mat&amp; kernel, Mat&amp; kernel_tm, <span class="keyword">int</span> inch, <span class="keyword">int</span> outch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    kernel_tm.create(<span class="number">4</span>*<span class="number">4</span>, inch, outch);</span><br><span class="line">    <span class="comment">// G</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">float</span> ktm[<span class="number">4</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">        &#123;   <span class="number">1.0f</span>,     <span class="number">0.0f</span>,     <span class="number">0.0f</span>&#125;,</span><br><span class="line">        &#123; <span class="number">1.0f</span>/<span class="number">2</span>,   <span class="number">1.0f</span>/<span class="number">2</span>,   <span class="number">1.0f</span>/<span class="number">2</span>&#125;,</span><br><span class="line">        &#123; <span class="number">1.0f</span>/<span class="number">2</span>,  <span class="number">-1.0f</span>/<span class="number">2</span>,   <span class="number">1.0f</span>/<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;   <span class="number">0.0f</span>,     <span class="number">0.0f</span>,     <span class="number">1.0f</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p&lt;outch; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> q = <span class="number">0</span>; q&lt;inch; q++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* kernel0 = (<span class="keyword">const</span> <span class="keyword">float</span>*)kernel + p*inch * <span class="number">9</span> + q * <span class="number">9</span>;</span><br><span class="line">            <span class="keyword">float</span>* kernel_tm0 = kernel_tm.channel(p).row(q);</span><br><span class="line">            <span class="comment">// transform kernel</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* k0 = kernel0;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* k1 = kernel0 + <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* k2 = kernel0 + <span class="number">6</span>;</span><br><span class="line">            <span class="comment">// tmp = G * g</span></span><br><span class="line">            <span class="keyword">float</span> tmp[<span class="number">4</span>][<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp[i][<span class="number">0</span>] = k0[<span class="number">0</span>] * ktm[i][<span class="number">0</span>] + k0[<span class="number">1</span>] * ktm[i][<span class="number">1</span>] + k0[<span class="number">2</span>] * ktm[i][<span class="number">2</span>];</span><br><span class="line">                tmp[i][<span class="number">1</span>] = k1[<span class="number">0</span>] * ktm[i][<span class="number">0</span>] + k1[<span class="number">1</span>] * ktm[i][<span class="number">1</span>] + k1[<span class="number">2</span>] * ktm[i][<span class="number">2</span>];</span><br><span class="line">                tmp[i][<span class="number">2</span>] = k2[<span class="number">0</span>] * ktm[i][<span class="number">0</span>] + k2[<span class="number">1</span>] * ktm[i][<span class="number">1</span>] + k2[<span class="number">2</span>] * ktm[i][<span class="number">2</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// kernel_tm0 = tmp * G_T </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;<span class="number">4</span>; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span>* tmpp = &amp;tmp[j][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    kernel_tm0[j*<span class="number">4</span> + i] = tmpp[<span class="number">0</span>] * ktm[i][<span class="number">0</span>] + tmpp[<span class="number">1</span>] * ktm[i][<span class="number">1</span>] + tmpp[<span class="number">2</span>] * ktm[i][<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>计算$V=B^TdB$，按照滑窗的方式每次取$(4\times 4)$大小的图片块进行计算存储<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> w = bottom_blob.w;</span><br><span class="line"><span class="keyword">int</span> h = bottom_blob.h;</span><br><span class="line"><span class="keyword">int</span> inch = bottom_blob.c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> outw = top_blob.w;</span><br><span class="line"><span class="keyword">int</span> outh = top_blob.h;</span><br><span class="line"><span class="keyword">int</span> outch = top_blob.c;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pad to 2n+2, winograd F(2,3)</span></span><br><span class="line"><span class="comment">//Mat bottom_blob_bordered = bottom_blob;</span></span><br><span class="line"></span><br><span class="line">outw = (outw + <span class="number">1</span>) / <span class="number">2</span> * <span class="number">2</span>;</span><br><span class="line">outh = (outh + <span class="number">1</span>) / <span class="number">2</span> * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">w = outw + <span class="number">2</span>;</span><br><span class="line">h = outh + <span class="number">2</span>;</span><br><span class="line"><span class="function">Mat <span class="title">bottom_blob_bordered</span><span class="params">(w,h,inch)</span></span>;</span><br><span class="line">copy_make_border(bottom_blob, bottom_blob_bordered);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BEGIN transform input</span></span><br><span class="line">Mat bottom_blob_tm;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> w_tm = outw / <span class="number">2</span> * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> h_tm = outh / <span class="number">2</span> * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nColBlocks = h_tm/<span class="number">4</span>; <span class="comment">// may be the block num in Feathercnn</span></span><br><span class="line">    <span class="keyword">int</span> nRowBlocks = w_tm/<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> tiles = nColBlocks * nRowBlocks;</span><br><span class="line"></span><br><span class="line">    bottom_blob_tm.create(<span class="number">4</span>*<span class="number">4</span>, tiles, inch, <span class="number">4u</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// BT</span></span><br><span class="line">    <span class="comment">// const float itm[4][4] = &#123;</span></span><br><span class="line">    <span class="comment">//     &#123;1.0f,  0.0f, -1.0f,  0.0f&#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;0.0f,  1.0f,  1.00f, 0.0f&#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;0.0f, -1.0f,  1.00f, 0.0f&#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;0.0f, -1.0f,  0.00f, 1.0f&#125;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> q=<span class="number">0</span>; q&lt;inch; q++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">float</span>* img = bottom_blob_bordered.channel(q);</span><br><span class="line">        <span class="keyword">float</span>* out_tm0 = bottom_blob_tm.channel(q);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nColBlocks; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* r0 = img + w * j * <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* r1 = r0 + w;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* r2 = r1 + w;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">float</span>* r3 = r2 + w;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nRowBlocks; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span> d0[<span class="number">4</span>],d1[<span class="number">4</span>],d2[<span class="number">4</span>],d3[<span class="number">4</span>];</span><br><span class="line">                <span class="keyword">float</span> w0[<span class="number">4</span>],w1[<span class="number">4</span>],w2[<span class="number">4</span>],w3[<span class="number">4</span>];</span><br><span class="line">                <span class="keyword">float</span> t0[<span class="number">4</span>],t1[<span class="number">4</span>],t2[<span class="number">4</span>],t3[<span class="number">4</span>];</span><br><span class="line">                <span class="comment">// load</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    d0[n] = r0[n];</span><br><span class="line">                    d1[n] = r1[n];</span><br><span class="line">                    d2[n] = r2[n];</span><br><span class="line">                    d3[n] = r3[n];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// w = B_t * d</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    w0[n] = d0[n] - d2[n];</span><br><span class="line">                    w1[n] = d1[n] + d2[n];</span><br><span class="line">                    w2[n] = d2[n] - d1[n];</span><br><span class="line">                    <span class="comment">//w3[n] = d3[n] - d1[n];</span></span><br><span class="line">                    w3[n] = d1[n] - d3[n];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// transpose d to d_t</span></span><br><span class="line">                &#123;</span><br><span class="line">                    t0[<span class="number">0</span>]=w0[<span class="number">0</span>]; t1[<span class="number">0</span>]=w0[<span class="number">1</span>]; t2[<span class="number">0</span>]=w0[<span class="number">2</span>]; t3[<span class="number">0</span>]=w0[<span class="number">3</span>];</span><br><span class="line">                    t0[<span class="number">1</span>]=w1[<span class="number">0</span>]; t1[<span class="number">1</span>]=w1[<span class="number">1</span>]; t2[<span class="number">1</span>]=w1[<span class="number">2</span>]; t3[<span class="number">1</span>]=w1[<span class="number">3</span>];</span><br><span class="line">                    t0[<span class="number">2</span>]=w2[<span class="number">0</span>]; t1[<span class="number">2</span>]=w2[<span class="number">1</span>]; t2[<span class="number">2</span>]=w2[<span class="number">2</span>]; t3[<span class="number">2</span>]=w2[<span class="number">3</span>];</span><br><span class="line">                    t0[<span class="number">3</span>]=w3[<span class="number">0</span>]; t1[<span class="number">3</span>]=w3[<span class="number">1</span>]; t2[<span class="number">3</span>]=w3[<span class="number">2</span>]; t3[<span class="number">3</span>]=w3[<span class="number">3</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// d = B_t * d_t</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    d0[n] = t0[n] - t2[n];</span><br><span class="line">                    d1[n] = t1[n] + t2[n];</span><br><span class="line">                    d2[n] = t2[n] - t1[n];</span><br><span class="line">                    <span class="comment">//d3[n] = t3[n] - t1[n];</span></span><br><span class="line">                    d3[n] = t1[n] - t3[n];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// save to out_tm</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    out_tm0[n   ] = d0[n];</span><br><span class="line">                    out_tm0[n+ <span class="number">4</span>] = d1[n];</span><br><span class="line">                    out_tm0[n+ <span class="number">8</span>] = d2[n];</span><br><span class="line">                    out_tm0[n+<span class="number">12</span>] = d3[n];</span><br><span class="line">                &#125;</span><br><span class="line">                r0 += <span class="number">2</span>;</span><br><span class="line">                r1 += <span class="number">2</span>;</span><br><span class="line">                r2 += <span class="number">2</span>;</span><br><span class="line">                r3 += <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">                out_tm0 += <span class="number">16</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>计算$M=U\odot V$，这里是矩阵的点乘，将很多操作展开了写。如果直接写循环，速度会慢很多<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line">Mat top_blob_tm;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> w_tm = outw / <span class="number">2</span> * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> h_tm = outh / <span class="number">2</span> * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nColBlocks = h_tm/<span class="number">4</span>; <span class="comment">// may be the block num in Feathercnn</span></span><br><span class="line">    <span class="keyword">int</span> nRowBlocks = w_tm/<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> tiles = nColBlocks * nRowBlocks;</span><br><span class="line"></span><br><span class="line">    top_blob_tm.create(<span class="number">16</span>, tiles, outch, <span class="number">4u</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nn_outch = outch &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> remain_outch_start = nn_outch &lt;&lt; <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> pp=<span class="number">0</span>; pp&lt;nn_outch; pp++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = pp * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">        Mat out0_tm = top_blob_tm.channel(p);</span><br><span class="line">        Mat out1_tm = top_blob_tm.channel(p+<span class="number">1</span>);</span><br><span class="line">        Mat out2_tm = top_blob_tm.channel(p+<span class="number">2</span>);</span><br><span class="line">        Mat out3_tm = top_blob_tm.channel(p+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> Mat kernel0_tm = kernel_tm.channel(p);</span><br><span class="line">        <span class="keyword">const</span> Mat kernel1_tm = kernel_tm.channel(p+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">const</span> Mat kernel2_tm = kernel_tm.channel(p+<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">const</span> Mat kernel3_tm = kernel_tm.channel(p+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tiles; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span>* output0_tm = out0_tm.row(i);</span><br><span class="line">            <span class="keyword">float</span>* output1_tm = out1_tm.row(i);</span><br><span class="line">            <span class="keyword">float</span>* output2_tm = out2_tm.row(i);</span><br><span class="line">            <span class="keyword">float</span>* output3_tm = out3_tm.row(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> sum0[<span class="number">16</span>] = &#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line">            <span class="keyword">float</span> sum1[<span class="number">16</span>] = &#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line">            <span class="keyword">float</span> sum2[<span class="number">16</span>] = &#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line">            <span class="keyword">float</span> sum3[<span class="number">16</span>] = &#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> q = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; q+<span class="number">3</span>&lt;inch; q+=<span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r0 = bottom_blob_tm.channel(q).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r1 = bottom_blob_tm.channel(q+<span class="number">1</span>).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r2 = bottom_blob_tm.channel(q+<span class="number">2</span>).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r3 = bottom_blob_tm.channel(q+<span class="number">3</span>).row(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k0 = kernel0_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k1 = kernel1_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k2 = kernel2_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k3 = kernel3_tm.row(q);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">16</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum0[n] += r0[n] * k0[n];</span><br><span class="line">                    k0 += <span class="number">16</span>;</span><br><span class="line">                    sum0[n] += r1[n] * k0[n];</span><br><span class="line">                    k0 += <span class="number">16</span>;</span><br><span class="line">                    sum0[n] += r2[n] * k0[n];</span><br><span class="line">                    k0 += <span class="number">16</span>;</span><br><span class="line">                    sum0[n] += r3[n] * k0[n];</span><br><span class="line">                    k0 -= <span class="number">16</span> * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">                    sum1[n] += r0[n] * k1[n];</span><br><span class="line">                    k1 += <span class="number">16</span>;</span><br><span class="line">                    sum1[n] += r1[n] * k1[n];</span><br><span class="line">                    k1 += <span class="number">16</span>;</span><br><span class="line">                    sum1[n] += r2[n] * k1[n];</span><br><span class="line">                    k1 += <span class="number">16</span>;</span><br><span class="line">                    sum1[n] += r3[n] * k1[n];</span><br><span class="line">                    k1 -= <span class="number">16</span> * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">                    sum2[n] += r0[n] * k2[n];</span><br><span class="line">                    k2 += <span class="number">16</span>;</span><br><span class="line">                    sum2[n] += r1[n] * k2[n];</span><br><span class="line">                    k2 += <span class="number">16</span>;</span><br><span class="line">                    sum2[n] += r2[n] * k2[n];</span><br><span class="line">                    k2 += <span class="number">16</span>;</span><br><span class="line">                    sum2[n] += r3[n] * k2[n];</span><br><span class="line">                    k2 -= <span class="number">16</span> * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">                    sum3[n] += r0[n] * k3[n];</span><br><span class="line">                    k3 += <span class="number">16</span>;</span><br><span class="line">                    sum3[n] += r1[n] * k3[n];</span><br><span class="line">                    k3 += <span class="number">16</span>;</span><br><span class="line">                    sum3[n] += r2[n] * k3[n];</span><br><span class="line">                    k3 += <span class="number">16</span>;</span><br><span class="line">                    sum3[n] += r3[n] * k3[n];</span><br><span class="line">                    k3 -= <span class="number">16</span> * <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; q&lt;inch; q++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r0 = bottom_blob_tm.channel(q).row(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k0 = kernel0_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k1 = kernel1_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k2 = kernel2_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k3 = kernel3_tm.row(q);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">16</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum0[n] += r0[n] * k0[n];</span><br><span class="line">                    sum1[n] += r0[n] * k1[n];</span><br><span class="line">                    sum2[n] += r0[n] * k2[n];</span><br><span class="line">                    sum3[n] += r0[n] * k3[n];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">16</span>; n++)</span><br><span class="line">            &#123;</span><br><span class="line">                output0_tm[n] = sum0[n];</span><br><span class="line">                output1_tm[n] = sum1[n];</span><br><span class="line">                output2_tm[n] = sum2[n];</span><br><span class="line">                output3_tm[n] = sum3[n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p=remain_outch_start; p&lt;outch; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat out0_tm = top_blob_tm.channel(p);</span><br><span class="line">        <span class="keyword">const</span> Mat kernel0_tm = kernel_tm.channel(p);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;tiles; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span>* output0_tm = out0_tm.row(i);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">float</span> sum0[<span class="number">16</span>] = &#123;<span class="number">0.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> q = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; q+<span class="number">3</span>&lt;inch; q+=<span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r0 = bottom_blob_tm.channel(q).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r1 = bottom_blob_tm.channel(q+<span class="number">1</span>).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r2 = bottom_blob_tm.channel(q+<span class="number">2</span>).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r3 = bottom_blob_tm.channel(q+<span class="number">3</span>).row(i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k0 = kernel0_tm.row(q);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k1 = kernel0_tm.row(q+<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k2 = kernel0_tm.row(q+<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k3 = kernel0_tm.row(q+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">16</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum0[n] += r0[n] * k0[n];</span><br><span class="line">                    sum0[n] += r1[n] * k1[n];</span><br><span class="line">                    sum0[n] += r2[n] * k2[n];</span><br><span class="line">                    sum0[n] += r3[n] * k3[n];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; q&lt;inch; q++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* r0 = bottom_blob_tm.channel(q).row(i);</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">float</span>* k0 = kernel0_tm.row(q);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">16</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sum0[n] += r0[n] * k0[n];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">16</span>; n++)</span><br><span class="line">            &#123;</span><br><span class="line">                output0_tm[n] = sum0[n];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>计算$Y=A^TMA$，最后裁剪掉周围多余的像素<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">Mat top_blob_bordered;</span><br><span class="line">top_blob_bordered.create(outw, outh, outch, <span class="number">4u</span>);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// AT</span></span><br><span class="line">    <span class="comment">// const float itm[2][4] = &#123;</span></span><br><span class="line">    <span class="comment">//     &#123;1.0f,  1.0f,  1.0f,  0.0f&#125;,</span></span><br><span class="line">    <span class="comment">//     &#123;0.0f,  1.0f, -1.0f,  1.0f&#125;</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> w_tm = outw / <span class="number">2</span> * <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> h_tm = outh / <span class="number">2</span> * <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nColBlocks = h_tm/<span class="number">4</span>; <span class="comment">// may be the block num in Feathercnn</span></span><br><span class="line">    <span class="keyword">int</span> nRowBlocks = w_tm/<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">pragma</span> omp parallel for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p=<span class="number">0</span>; p&lt;outch; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        Mat out_tm = top_blob_tm.channel(p);</span><br><span class="line">        Mat out = top_blob_bordered.channel(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//const float bias0 = bias ? bias[p] : 0.f;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;nColBlocks; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span>* outRow0 = out.row(j*<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">float</span>* outRow1 = out.row(j*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nRowBlocks; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">float</span>* out_tile = out_tm.row(j*nRowBlocks + i);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">float</span> s0[<span class="number">4</span>],s1[<span class="number">4</span>],s2[<span class="number">4</span>],s3[<span class="number">4</span>];</span><br><span class="line">                <span class="keyword">float</span> w0[<span class="number">4</span>],w1[<span class="number">4</span>];</span><br><span class="line">                <span class="keyword">float</span> d0[<span class="number">2</span>],d1[<span class="number">2</span>],d2[<span class="number">2</span>],d3[<span class="number">2</span>];</span><br><span class="line">                <span class="keyword">float</span> o0[<span class="number">2</span>],o1[<span class="number">2</span>];</span><br><span class="line">                <span class="comment">// load</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    s0[n] = out_tile[n];</span><br><span class="line">                    s1[n] = out_tile[n+ <span class="number">4</span>];</span><br><span class="line">                    s2[n] = out_tile[n+ <span class="number">8</span>];</span><br><span class="line">                    s3[n] = out_tile[n+<span class="number">12</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// w = A_T * W</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">4</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    w0[n] = s0[n] + s1[n] + s2[n];</span><br><span class="line">                    <span class="comment">//w1[n] = s1[n] - s2[n] + s3[n];</span></span><br><span class="line">                    w1[n] = s1[n] - s2[n] - s3[n];</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// transpose w to w_t</span></span><br><span class="line">                &#123;</span><br><span class="line">                    d0[<span class="number">0</span>] = w0[<span class="number">0</span>]; d0[<span class="number">1</span>] = w1[<span class="number">0</span>];</span><br><span class="line">                    d1[<span class="number">0</span>] = w0[<span class="number">1</span>]; d1[<span class="number">1</span>] = w1[<span class="number">1</span>];</span><br><span class="line">                    d2[<span class="number">0</span>] = w0[<span class="number">2</span>]; d2[<span class="number">1</span>] = w1[<span class="number">2</span>];</span><br><span class="line">                    d3[<span class="number">0</span>] = w0[<span class="number">3</span>]; d3[<span class="number">1</span>] = w1[<span class="number">3</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// Y = A_T * w_t</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n &lt; <span class="number">2</span>; n++)</span><br><span class="line">                &#123;</span><br><span class="line">                    o0[n] = d0[n] + d1[n] + d2[n];</span><br><span class="line">                    <span class="comment">//o1[n] = d1[n] - d2[n] + d3[n];</span></span><br><span class="line">                    o1[n] = d1[n] - d2[n] - d3[n];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// save to top blob tm</span></span><br><span class="line">                outRow0[<span class="number">0</span>] = o0[<span class="number">0</span>];</span><br><span class="line">                outRow0[<span class="number">1</span>] = o0[<span class="number">1</span>];</span><br><span class="line">                outRow1[<span class="number">0</span>] = o1[<span class="number">0</span>];</span><br><span class="line">                outRow1[<span class="number">1</span>] = o1[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                outRow0 += <span class="number">2</span>;</span><br><span class="line">                outRow1 += <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// END transform output</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// cut result pad</span></span><br><span class="line"><span class="comment">//copy_make_border1</span></span><br><span class="line">copy_cut_border(top_blob_bordered, top_blob);</span><br></pre></td></tr></table></figure></li></ol><p>上面的实现过程，ncnn计算的U和V相对于公式是转置，计算Y的时候也是转置，结合到一起结果不变，也可以完全按照公式来写。对于速度更快的$F(4\times 4,3\times 3)$，计算公式不变，如果对输入特征图进行转换后进行一定的内存重排，速度能够更快。转换矩阵为下面几个<br>$$<br>\begin{aligned}<br>B^T &amp;=\left[ \begin{matrix}<br>4 &amp; 0 &amp; -5 &amp; 0 &amp; 1 &amp; 0 \\<br>0 &amp; -4 &amp; -4 &amp; 1 &amp; 1 &amp; 0 \\<br>0 &amp; 4 &amp; -4 &amp; -1 &amp; 1 &amp; 0 \\<br>0 &amp; -2 &amp; -1 &amp; 2 &amp; 1 &amp; 0 \\<br>0 &amp; 2 &amp; -1 &amp; -2 &amp; 1 &amp; 0 \\<br>0 &amp; 4 &amp; 0 &amp; -5 &amp; 0 &amp; 1<br>\end{matrix}\right] \\<br>G &amp;=\left[ \begin{matrix}<br>\frac{1}{4} &amp; 0 &amp; 0 \\<br>-\frac{1}{6} &amp; -\frac{1}{6} &amp; -\frac{1}{6} \\<br>-\frac{1}{6} &amp; \frac{1}{6} &amp; -\frac{1}{6} \\<br>\frac{1}{24} &amp; \frac{1}{12} &amp; \frac{1}{6} \\<br>\frac{1}{24} &amp; -\frac{1}{12} &amp; \frac{1}{6} \\<br>0 &amp; 0 &amp; 1<br>\end{matrix}\right] \\<br>A^T &amp;=\left[ \begin{matrix}<br>1 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 \\<br>0 &amp; 1 &amp; -1 &amp; 2 &amp; -2 &amp; 0 \\<br>0 &amp; 1 &amp; 1 &amp; 4 &amp; 4 &amp; 0 \\<br>0 &amp; 1 &amp; -1 &amp; 8 &amp; -8 &amp; 1<br>\end{matrix}\right]<br>\end{aligned}<br>$$</p><blockquote><p><font face="微软雅黑" color="#FF0000">具体实验过程中发现winograd没有im2col+gemm快，不知道为啥</font></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考ncnn的Mat类&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="卷积" scheme="http://yoursite.com/tags/%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
  <entry>
    <title>常用的几种损失函数</title>
    <link href="http://yoursite.com/2020/04/22/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2020/04/22/%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%A0%E7%A7%8D%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/</id>
    <published>2020-04-22T04:27:10.000Z</published>
    <updated>2020-04-24T14:50:09.564Z</updated>
    
    <content type="html"><![CDATA[<h2 id="均方差"><a href="#均方差" class="headerlink" title="均方差"></a>均方差</h2><p>$$ MSE = \frac{\sum_{i = 1}^n ({y_i} - p_i)^2}{n}$$常用于回归任务。</p><h2 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h2><p>$$ CE =  \frac{\sum_{i = 1}^n - {y_i} * log({p_i}) - (1 - {y_i}) * log(1 - {p_i})}{n} $$分类任务常用交叉熵。如果采用均方差，梯度下降时对w和b的更新需要乘以当前预测值sigmoid的导数，sigmoid的导数在变量很大或者很小时接近于0，此时参数几乎不更新。而使用交叉熵时，梯度的更新只与预测值和实际值的差值有关，不受sigmoid函数导数的影响。</p><h2 id="smooth-L1"><a href="#smooth-L1" class="headerlink" title="smooth L1"></a>smooth L1</h2><p>$$L1 = |x|;L2 = {x^2};smoothL1 = \begin{cases}0.5x^2     \quad |x|\leq 0\\|x|-0.5 \quad otherwise\end{cases}$$由FRCNN提出，smooth L1 loss能从两个方面限制梯度：当预测框与 ground truth 差别过大时，梯度值不至于过大（过大会导致训练初期不稳定，所以用L2 loss）；当预测框与 ground truth 差别很小时，梯度值足够小（L1 loss的值为2个恒定值，且在0处不可导，所以用L2 loss，减去0.5是为了让loss连续）。</p><h2 id="Focal-Loss"><a href="#Focal-Loss" class="headerlink" title="Focal Loss"></a><a href="FL.pdf">Focal Loss</a></h2><p>$$<br>CE(p,y)=\begin{cases}<br>-log(p),\quad y=1 \\<br>-log(1-p),\quad otherwise<br>\end{cases};<br>p_t=\begin{cases}<br>p,\quad y=1 \\<br>1-p,\quad otherwise<br>\end{cases} \\<br>$$$$<br>FL({p_t}) =  - {\alpha_t}{(1 - {p_t})^\gamma }log({p_t})<br>$$One Stage方法精度不高的原因：</p><ol><li>极度不平衡的正负样本比例: anchor是一种类似sliding windows的选框方式，这会使得正负样本的比例接近1000:1, 而且绝大部分负样本都是easy example。two stage的方法在RPN阶段会生成很多个包含目标的patch，拉近了正负样本的比例。</li><li>梯度优化过程被easy example过度影响: 这些easy example的loss虽然不高，但由于数量众多, 最终合起来会对loss有很大的贡献，从而导致优化的时候过度关注这些easy example，这样会收敛到一个不够好的结果。</li></ol><p>解决方法：</p><ol><li>一个样本被分错的时候，$p_t$很小，比如当$y=1$时，$p_t$要小于0.5才算是错分类，此时$p_t$就比较小，反之亦然，因此调制系数就会趋近于1，也就是说相比原来的loss没有太大的改变, 而当$p_t$趋近于1的时候，说明此时分类正确而且是易分类样本，调制系数就会趋近于0，也就是该样本对总的loss的贡献度很小。</li><li>当$\gamma=0$的时候，focal loss就是传统的交叉熵损失，随着$\gamma$的增加, 调制系数的影响力也会增加。</li><li>$\alpha_t$为正负样本的权重系数，正样本为$\alpha$，负样本为$1-\alpha$。</li><li>论文里设置$\gamma=2,\alpha=0.25$。</li></ol><p>官方代码实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid_focal_loss</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    inputs: torch.Tensor,</span></span></span><br><span class="line"><span class="function"><span class="params">    targets: torch.Tensor,</span></span></span><br><span class="line"><span class="function"><span class="params">    alpha: float = <span class="number">-1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    gamma: float = <span class="number">2</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    reduction: str = <span class="string">"none"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> -&gt; torch.Tensor:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Loss used in RetinaNet for dense detection: https://arxiv.org/abs/1708.02002.</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        inputs: A float tensor of arbitrary shape.</span></span><br><span class="line"><span class="string">                The predictions for each example.</span></span><br><span class="line"><span class="string">        targets: A float tensor with the same shape as inputs. Stores the binary</span></span><br><span class="line"><span class="string">                 classification label for each element in inputs</span></span><br><span class="line"><span class="string">                (0 for the negative class and 1 for the positive class).</span></span><br><span class="line"><span class="string">        alpha: (optional) Weighting factor in range (0,1) to balance</span></span><br><span class="line"><span class="string">                positive vs negative examples. Default = -1 (no weighting).</span></span><br><span class="line"><span class="string">        gamma: Exponent of the modulating factor (1 - p_t) to</span></span><br><span class="line"><span class="string">               balance easy vs hard examples.</span></span><br><span class="line"><span class="string">        reduction: 'none' | 'mean' | 'sum'</span></span><br><span class="line"><span class="string">                 'none': No reduction will be applied to the output.</span></span><br><span class="line"><span class="string">                 'mean': The output will be averaged.</span></span><br><span class="line"><span class="string">                 'sum': The output will be summed.</span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Loss tensor with the reduction option applied.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    p = torch.sigmoid(inputs)</span><br><span class="line">    ce_loss = F.binary_cross_entropy_with_logits(inputs, targets, reduction=<span class="string">"none"</span>)</span><br><span class="line">    p_t = p * targets + (<span class="number">1</span> - p) * (<span class="number">1</span> - targets)</span><br><span class="line">    loss = ce_loss * ((<span class="number">1</span> - p_t) ** gamma)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> alpha &gt;= <span class="number">0</span>:</span><br><span class="line">        alpha_t = alpha * targets + (<span class="number">1</span> - alpha) * (<span class="number">1</span> - targets)</span><br><span class="line">        loss = alpha_t * loss</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> reduction == <span class="string">"mean"</span>:</span><br><span class="line">        loss = loss.mean()</span><br><span class="line">    <span class="keyword">elif</span> reduction == <span class="string">"sum"</span>:</span><br><span class="line">        loss = loss.sum()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><h2 id="Dice-Loss"><a href="#Dice-Loss" class="headerlink" title="Dice Loss"></a>Dice Loss</h2><p>$$ Dice = 1 - \frac{2\sum_{i}^{N}{p_i}{g_i}+\lambda }{\sum_{i}^{N}{p_i^2 + \sum_{i}^{N}{g_i^2}  + \lambda }}<br>$$主要用于医学图像分割，大致原理是交并比。<br>pytorch代码实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DiceLoss</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(DiceLoss, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, pred, target)</span>:</span></span><br><span class="line">        N = target.size(<span class="number">0</span>)</span><br><span class="line">        smooth = <span class="number">0.0001</span></span><br><span class="line">        pred_flat = pred.view(N, <span class="number">-1</span>)</span><br><span class="line">        target_flat = target.view(N, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">        intersection = (pred_flat * target_flat).sum()</span><br><span class="line"></span><br><span class="line">        loss = (<span class="number">2.</span>*intersection + smooth) / (pred_flat.sum() + target_flat.sum() + smooth)</span><br><span class="line">        loss = <span class="number">1</span> - loss</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;均方差&quot;&gt;&lt;a href=&quot;#均方差&quot; class=&quot;headerlink&quot; title=&quot;均方差&quot;&gt;&lt;/a&gt;均方差&lt;/h2&gt;&lt;p&gt;$$ MSE = \frac{\sum_{i = 1}^n ({y_i} - p_i)^2}{n}$$常用于回归任务。&lt;/p&gt;
&lt;h
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="损失函数" scheme="http://yoursite.com/tags/%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>目标跟踪之Siamese系列</title>
    <link href="http://yoursite.com/2020/03/23/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E4%B9%8BSiamese%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2020/03/23/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E4%B9%8BSiamese%E7%B3%BB%E5%88%97/</id>
    <published>2020-03-22T16:55:38.000Z</published>
    <updated>2020-04-23T10:53:15.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SiamFC"><a href="#SiamFC" class="headerlink" title="SiamFC"></a><a href="siamFC.pdf">SiamFC</a></h2><p>使用孪生网络结构，即两个结构一样权重一样的网络结构，其中一个输入候选样本，另一个网络输入为待跟踪的目标。通常选取的是视频序列第一帧中的目标对象，而候选样本则是之后每一帧中的图像搜索区域（search image），而孪生网络要做的就是找到之后每一帧中与第一帧中的范本最相似的候选区域，即为这一帧中的目标，这样我们就可以实现对一个目标的跟踪。网络结构如下：<br><img src="/2020/03/23/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E4%B9%8BSiamese%E7%B3%BB%E5%88%97/1.jpg" alt="SiamFC网络结构"><br>每个网络为不带padding的全卷积神经网络（采用AlenxNet的结构），* 部分为相关性计算，采用卷积来实现。计算两个feature map各个位置（区域）上的相似度，得到一个score map。最后对这个score map进行插值（这里使用的是双三线性插值，将大小由17×17变成272×272），获得和原图像一样的空间分辨率，根据该score map，即可定位到跟踪目标在新一帧（检测图像）中的精确位置。SiameseFC在预测的时候，不在线更新模板图像，即只需要计算一遍目标对象的特征，加快了计算速度，但是第一帧特征的好坏关系到跟踪的效果。对目标进行5种尺度来搜索（有点类似anchor的机制）。</p><h2 id="SiamRPN"><a href="#SiamRPN" class="headerlink" title="SiamRPN"></a><a href="siamRPN.pdf">SiamRPN</a></h2><p>基于SiamFC, 引入了Faster RCNN中的RPN模块，让tracker可以回归位置、形状，可以省掉多尺度测试，* 表示卷积操作。网络主体还是AlexNet。<br><img src="/2020/03/23/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E4%B9%8BSiamese%E7%B3%BB%E5%88%97/2.png" alt="SiamRPN网络结构"></p><h2 id="SiamRPN-1"><a href="#SiamRPN-1" class="headerlink" title="SiamRPN++"></a><a href="SiamRPN++.pdf">SiamRPN++</a></h2><p>之前的跟踪方法都采用层数较少的Alexnet进行特征提取，特征提取效果有限。当网络层数加深，则需要进行padding操作，这种操作会破坏严格平移不变性（边缘的像素和靠近中心的像素对网络的响应不一样。这就可能导致训练过程中，网络倾向于通过padding的pattern来确定目标在哪，即padding少的位置接近中心，更可能是目标。），带来的弊端就是会学习到位置偏见：按照SiamFC的训练方法，即正样本都在正中心，网络会学到这种统计特性，学到样本中正样本分布的情况。解决办法是：在训练过程中，不再把正样本放在中心，而是以均匀分布的采样方式让目标在中心点附近进行偏移，通过这种方式可以缓解网络因为破坏了严格平移不变性带来的影响，即消除了位置偏见，让现代化网络可以应用于跟踪中。<br>使用更深的resnet网络，同时也采用了特征融合，以及将之前的相似度计算由传统卷积改为了可分离卷积，在精度和速度上都有了一定的提升。<br><img src="/2020/03/23/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA%E4%B9%8BSiamese%E7%B3%BB%E5%88%97/3.png" alt="SiamRPN++网络结构"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SiamFC&quot;&gt;&lt;a href=&quot;#SiamFC&quot; class=&quot;headerlink&quot; title=&quot;SiamFC&quot;&gt;&lt;/a&gt;&lt;a href=&quot;siamFC.pdf&quot;&gt;SiamFC&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;使用孪生网络结构，即两个结构一样权重一样的网络结构，其中一
      
    
    </summary>
    
    
      <category term="深度学习" scheme="http://yoursite.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="目标跟踪" scheme="http://yoursite.com/tags/%E7%9B%AE%E6%A0%87%E8%B7%9F%E8%B8%AA/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://yoursite.com/2020/03/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2020/03/21/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-03-20T16:54:05.000Z</published>
    <updated>2020-04-23T11:03:44.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>简称快排，时间复杂度并不固定，最好的情况下（元素初始状态是正序），时间复杂度是O(n)，在最坏情况下（元素刚好是反向的），时间复杂度为 O(n^2)（和选择排序一个效率）但是如果在比较理想的情况下时间复杂度 O(nlogn)。快排算法每次选择一个元素并且将整个数组以那个元素分为两部分，从右开始遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qsort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left &gt;= right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> base = arr[left];</span><br><span class="line">    <span class="keyword">int</span> i = left;</span><br><span class="line">    <span class="keyword">int</span> j = right;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(arr[j] &gt;= base &amp;&amp; i &lt; j)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">while</span>(arr[i] &lt;= base &amp;&amp; i &lt; j)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; j)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp = arr[i];</span><br><span class="line">            arr[i] = arr[j];</span><br><span class="line">            arr[j] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[left] = arr[i];</span><br><span class="line">    arr[i] = base;</span><br><span class="line">    qsort(arr, left, i<span class="number">-1</span>);</span><br><span class="line">    qsort(arr, i+<span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序相比较之前的排序算法而言加入了分治法的思想，将待排序元素分成大小大致相同的2个子集合(递归直到最小的排序单元），分别对2个子集合进行排序，排序时开辟两个空间存左右两个子集，从左到右遍历，较小的那个数存入结果，直到遍历完全。最终将排好序的子集合合并成为所要求的排好序的集合。归并排序算法的时间复杂度是O(nlogn)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k;</span><br><span class="line">    <span class="keyword">int</span> n1 = m - l + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n2 =  r - m;</span><br><span class="line">    <span class="keyword">int</span> L[n1], R[n2];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n1; i++)</span><br><span class="line">        L[i] = arr[l + i];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n2; j++)</span><br><span class="line">        R[j] = arr[m + <span class="number">1</span>+ j];</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    k = l;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1 &amp;&amp; j &lt; n2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (L[i] &lt;= R[j])</span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = L[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            arr[k] = R[j];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; n1)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = L[i];</span><br><span class="line">        i++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; n2)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[k] = R[j];</span><br><span class="line">        j++;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m = l+(r-l)/<span class="number">2</span>;</span><br><span class="line">        mergeSort(arr, l, m);</span><br><span class="line">        mergeSort(arr, m+<span class="number">1</span>, r);</span><br><span class="line">        merge(arr, l, m, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>每次选择两个元素，按照需求进行交换（比如需要升序排列的话，把较大的元素放在靠后一些的位置），一直循环直到有序，时间复杂度O(n^2)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> swapp = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">while</span>(swapp)</span><br><span class="line">    &#123;</span><br><span class="line">        swapp = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.size()<span class="number">-1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i]&gt;arr[i+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                tmp = arr[i];</span><br><span class="line">                arr[i] = arr[i+<span class="number">1</span>];</span><br><span class="line">                arr[i+<span class="number">1</span>] = tmp;</span><br><span class="line">                swapp = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>每次选择一个元素，并且将这个元素和整个数组中的所有元素进行比较，然后插入到合适的位置。比较当前元素和数组前面的所有元素(从后往前遍历)，时间复杂度 O(n^2)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insertion_sort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (j = i; j &gt; <span class="number">0</span> &amp;&amp; arr[j - <span class="number">1</span>] &gt; tmp; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序是插入排序的优化版，根据步长由长到短分组，进行排序，初始步长为n/2，后续步长每次变成1/2，直到步长为1为止。时间复杂度O(n^(1.3—2))。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.size();</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = n/<span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = gap; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap)</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h2&gt;&lt;p&gt;简称快排，时间复杂度并不固定，最好的情况下（元素初始状态是正序），时间复杂度是O(n)，在最坏情况下（元素刚好是反向的），时
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
